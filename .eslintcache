[{"/Users/adam/blogfinal/src/App.js":"1","/Users/adam/blogfinal/src/components/EditPost.js":"2","/Users/adam/blogfinal/src/components/TitleNavBar.js":"3","/Users/adam/blogfinal/src/components/CreateCommentPost.js":"4","/Users/adam/blogfinal/src/components/DisplayPosts.js":"5","/Users/adam/blogfinal/src/components/CreatePost.js":"6","/Users/adam/blogfinal/src/aws-exports.js":"7","/Users/adam/blogfinal/src/graphql/mutations.js":"8","/Users/adam/blogfinal/src/reportWebVitals.js":"9","/Users/adam/blogfinal/src/index.js":"10","/Users/adam/blogfinal/src/graphql/subscriptions.js":"11","/Users/adam/blogfinal/src/graphql/queries.js":"12"},{"size":755,"mtime":1611462227757,"results":"13","hashOfConfig":"14"},{"size":2413,"mtime":1611467648804,"results":"15","hashOfConfig":"14"},{"size":1927,"mtime":1611447233284,"results":"16","hashOfConfig":"14"},{"size":1717,"mtime":1611441046261,"results":"17","hashOfConfig":"14"},{"size":7973,"mtime":1611447201382,"results":"18","hashOfConfig":"14"},{"size":2281,"mtime":1611446933259,"results":"19","hashOfConfig":"14"},{"size":734,"mtime":1611467255735,"results":"20","hashOfConfig":"14"},{"size":5578,"mtime":1611456216406,"results":"21","hashOfConfig":"14"},{"size":362,"mtime":1610857971005,"results":"22","hashOfConfig":"14"},{"size":558,"mtime":1610905299948,"results":"23","hashOfConfig":"14"},{"size":4642,"mtime":1611456216482,"results":"24","hashOfConfig":"14"},{"size":3173,"mtime":1611456216315,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"nce4pf",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adam/blogfinal/src/App.js",["53"],"import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport DisplayPosts from './components/DisplayPosts';\nimport CreatePost from './components/CreatePost';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\nimport \"@aws-amplify/ui/dist/style.css\";\nimport TitleNavBar from './components/TitleNavBar';\nimport { Container, Card } from 'react-bootstrap'\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <span>\n        <TitleNavBar />\n        <br />\n        <Container>\n          <Card>\n            <CreatePost />\n          </Card>\n          <DisplayPosts />\n        </Container>\n      </span>\n    </div>\n  );\n}\n\nexport default withAuthenticator(App, \n  { includeGreetings: true });","/Users/adam/blogfinal/src/components/EditPost.js",[],"/Users/adam/blogfinal/src/components/TitleNavBar.js",[],"/Users/adam/blogfinal/src/components/CreateCommentPost.js",[],"/Users/adam/blogfinal/src/components/DisplayPosts.js",["54","55"],"import React, { Component } from 'react'\nimport {listPosts} from '../graphql/queries'\nimport { API, Auth, graphqlOperation } from 'aws-amplify'\nimport DeletePost from './DeletePost'\nimport EditPost from './EditPost'\nimport CreateCommentPost from './CreateCommentPost'\nimport CommentPost from './CommentPost'\nimport UsersWhoLikedPost from './UsersWhoLikedPost'\nimport { AmplifySignOut } from '@aws-amplify/ui-react';\nimport { onCreatePost, onDeletePost, onUpdatePost, onCreateComment, onCreateLike } from '../graphql/subscriptions'\nimport { createLike } from '../graphql/mutations'\nimport { FaSadTear, FaThumbsUp, FaUser } from 'react-icons/fa'\nimport { Card } from 'react-bootstrap'\n\nclass DisplayPosts extends Component {\n\n  state = {\n    ownerId: \"\",\n    ownerUsername: \"\",\n    errorMessage:\"\",\n    postLikedBy: [],\n    isHovering: false,\n    posts: []\n  }\n\n  componentDidMount = async () => {\n    this.getPosts()\n\n    await Auth.currentUserInfo()\n      .then(user => {\n        this.setState(\n          {\n            ownerId: user.attributes.sub,\n            ownerUsername: user.username,\n          }\n        )\n      })\n\n    this.createPostListener = API.graphql(graphqlOperation(onCreatePost))\n    .subscribe({\n      next: postData  => {\n        const newPost = postData.value.data.onCreatePost\n        const prevPosts = this.state.posts.filter( post => post.id !== newPost.id )\n\n        const updatedPosts = [newPost, ...prevPosts]\n\n        this.setState({ posts: updatedPosts })\n      }\n    })\n\n    this.deletePostListener = API.graphql(graphqlOperation(onDeletePost))\n    .subscribe({\n         next: postData => {\n               \n            const deletedPost = postData.value.data.onDeletePost\n            const updatedPosts = this.state.posts.filter(post => post.id !== deletedPost.id)\n            this.setState({posts: updatedPosts})\n         }\n    })\n\n    this.updatePostListener = API.graphql(graphqlOperation(onUpdatePost))\n    .subscribe({\n      next: postData => {\n        const { posts } = this.state\n        const updatePost = postData.value.data.onUpdatePost\n        const index = posts.findIndex(post => post.id === updatePost.id) //had forgotten to say updatePost.id!\n        const updatePosts = [\n          ...posts.slice(0, index),\n          updatePost,\n          ...posts.slice(index + 1)\n        ]\n\n        this.setState({ posts: updatePosts})\n\n      }\n    })\n\n    this.createPostCommentListener = API.graphql(graphqlOperation(onCreateComment))\n      .subscribe({\n        next: commentData => {\n          const createdComment = commentData.value.data.onCreateComment\n          let posts = [ ...this.state.posts]\n\n          for (let post of posts) {\n            if ( createdComment.post.id === post.id) {\n              post.comments.items.push(createdComment)\n            }\n          }\n          this.setState({ posts })\n        }\n      })\n\n      this.postCreatePostLikeListener = API.graphql(graphqlOperation(onCreateLike))\n        .subscribe ({\n          next: postData => {\n           const createdLike = postData.value.data.onCreateLike\n\n           let posts = [...this.state.posts]\n           for (let post of posts) {\n             if (createdLike.post.id === post.id) {\n               post.likes.items.push(createdLike)\n             }\n           }\n           this.setState({ posts }) \n          }\n        })\n  }\n  \n\n  componentWillUnmount() {\n    this.createPostListener.unsubscribe()\n    this.deletePostListener.unsubscribe()\n    this.updatePostListener.unsubscribe()\n    this.createPostCommentListener.unsubscribe()\n    this.postCreatePostLikeListener.unsubscribe()\n  }\n\n  getPosts = async () => {\n    const result = await API.graphql(graphqlOperation(listPosts))\n\n    this.setState({ posts: result.data.listPosts.items })\n    // console.log(\"All Posts\", JSON.stringify(result.data.listPosts.items))\n    // console.log(\"All Posts\", result.data.listPosts.items)\n  }\n\n  likedPost = (postId) => {\n    for (let post of this.state.posts) {\n      if ( post.id === postId ) {\n        if ( post.postOwnerId === this.state.ownerId) return true\n          for (let like of post.likes.items) {\n            if ( like.likeOwnerId === this.state.ownerId) {\n              return true;\n            }\n          }\n      }\n    }\n    return false;\n  }\n\n  handleLike = async postId => {\n    if (this.likedPost(postId)) { return this.setState({errorMessage: \"Can't like your own post\"})} else {\n      const input = {\n        numberLikes: 1,\n        likeOwnerId: this.state.ownerId,\n        likeOwnerUsername: this.state.ownerUsername,\n        likePostId: postId\n      }\n  \n      try {\n        const result = await API.graphql(graphqlOperation(createLike, { input }))\n  \n        console.log(\"Liked: \", result.data);\n  \n      }catch (error) {\n        console.error(error)\n      }\n    }    \n  }\n\n  handleMouseHover = async postId => {\n    this.setState({isHovering: !this.state.isHovering})\n\n    let innerLikes = this.state.postLikedBy\n\n    for (let post of this.state.posts) {\n      if (post.id === postId) {\n        for ( let like of post.likes.items) {\n          innerLikes.push(like.likeOwnerUsername)\n        }\n      }\n    this.setState({postLikedBy: innerLikes})\n    }\n    console.log(\"Post liked by: \", this.state.postLikedBy)\n  }\n\n  handleMouseHoverLeave = async () => {\n    this.setState({isHovering: !this.state.isHovering})\n    this.setState({postLikedBy: []})\n  }\n  render() {\n    const { posts } = this.state\n\n    let loggedInUser = this.state.ownerId\n\n\n    return posts.map(( post ) => {\n\n      return (\n        <div>\n          <br/>\n          <Card>\n            <div className=\"posts\" style={ rowStyle } key= { post.id }>\n              <h1>{ post.postTitle }</h1>\n              <span style={{ fontStyle: \"italic\", color: \"#0ca5e297\" }}>\n\n                { \"Posted by: \"} { post.postOwnerUsername }\n\n                {\" on \"}\n                <time style={{ fontStyle: \"italic\" }}>\n                  {\" \"}\n                  {new Date(post.createdAt).toDateString()}\n                </time>\n\n              </span>\n              <p>{ post.postBody }</p>\n              <br/>\n              <span>\n                {post.postOwnerId === loggedInUser &&\n                  <DeletePost data={post} />\n                }\n                {post.postOwnerId === loggedInUser &&\n                  <EditPost {...post} />\n                }\n\n                <span>\n                  <p className=\"alert\">{post.postOwnerId === loggedInUser && this.state.errorMessage}</p>\n                  <p onMouseEnter={ () => this.handleMouseHover(post.id)}\n                    onMouseLeave={() => this.handleMouseHoverLeave()}\n                    onClick={() => this.handleLike(post.id)}\n                    style={{color: (post.likes.items.length) > 0 ? \"blue\": \"gray\"}}\n                    className=\"like-button\">\n                    <FaThumbsUp/>\n                    {post.likes.items.length}\n                  </p>\n                  {\n                    this.state.isHovering &&\n                    <div className=\"users-liked\">\n                      {this.state.postLikedBy.length === 0 ? \n                        \" Liked by no one \" : \"Liked by: \"}\n                      {this.state.postLikedBy.length === 0 ? <FaSadTear /> : <UsersWhoLikedPost data={this.state.postLikedBy} /> }\n                    </div>\n                  }\n                </span>\n              </span>\n              <span>\n                <CreateCommentPost postId={post.id} />\n                  { post.comments.items.length > 0 && <span style={{fontSize:\"19px\", color:\"gray\"}}>\n                    Comments: </span>}\n                    {\n                      post.comments.items.map((comment, index) => <CommentPost key={index} commentData={comment} />)\n                    }\n              </span>\n            </div>\n          </Card>\n        </div>\n      )\n    })\n  }\n}\n\nconst rowStyle = {\n  background: '#f4f4f4',\n  padding: '10px',\n  border: '1px #ccc',\n  margin: '14px'\n}\n\nexport default DisplayPosts;","/Users/adam/blogfinal/src/components/CreatePost.js",[],"/Users/adam/blogfinal/src/aws-exports.js",[],"/Users/adam/blogfinal/src/graphql/mutations.js",[],["56","57"],"/Users/adam/blogfinal/src/reportWebVitals.js",[],"/Users/adam/blogfinal/src/index.js",[],"/Users/adam/blogfinal/src/graphql/subscriptions.js",[],"/Users/adam/blogfinal/src/graphql/queries.js",[],{"ruleId":"58","severity":1,"message":"59","line":6,"column":29,"nodeType":"60","messageId":"61","endLine":6,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":9,"column":10,"nodeType":"60","messageId":"61","endLine":9,"endColumn":24},{"ruleId":"58","severity":1,"message":"62","line":12,"column":33,"nodeType":"60","messageId":"61","endLine":12,"endColumn":39},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},"no-unused-vars","'AmplifySignOut' is defined but never used.","Identifier","unusedVar","'FaUser' is defined but never used.","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-global-assign","no-unsafe-negation"]